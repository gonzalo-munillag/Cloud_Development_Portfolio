{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;\f1\froman\fcharset0 Times-Roman;\f2\fmodern\fcharset0 Courier-Oblique;
\f3\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\csgray\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww13380\viewh12400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \expnd0\expndtw0\kerning0
GIT\
\
git clone ttps://github.com/your/repository\
\
git remote set-url origin https://github.com/your/repository\
\
git add .\
\
git commit -m \'93a message\'94\
\
git push\
\
git pull\
\
To check which url is set\
git config --get remote.origin.url\
\
To undo a pull command on the local repo\
git reset _number_ --hard\
\
You can find _number_ in the previous pull\
\
# 
\f1 \outl0\strokewidth0 \strokec2 To undo 
\f0 git add
\f1  before a commit, run 
\f0 git reset <file>
\f1  or 
\f0 git reset
\f1  to unstage all changes.
\f0 \outl0\strokewidth0 \
\
OR\
git init -b main\
$ git remote add origin 
\f2\i  <REMOTE_URL> 
\f0\i0 \
# Sets the new remote\
$ git remote -v\
# Verifies the new remote URL\
git push -u origin main\
\
# to teel git to stop pushing a file\
git rm --cached <file_name>\
\
Error with pushing, main vs master: https://stackoverflow.com/questions/64601716/error-src-refspec-main-does-not-match-any-error-failed-to-push-some-refs-to-u\
\
DOCKER\
\
docker build -t name_image . will run the Dockerfile to create an image\
docker images will print all the available images\
docker run \{IMAGE_ID\} will run a container with the image\
docker run -d docker_image_name you run this in terminal and you can still use the terminal\
docker ps will print all the running containers\
docker kill \{CONTAINER_ID\} will terminate the container\
docker logs # https://docs.docker.com/engine/reference/commandline/logs/\
docker exec -it container_ID sh attaching to a container and you can run commands as if you were inside the container /
\f1 Connect into the Docker container for troubleshooting
\f0  # https://docs.docker.com/engine/reference/commandline/exec/\
docker ps view docker processes # https://docs.docker.com/engine/reference/commandline/ps/\
docker inspect view details of docker objects # https://docs.docker.com/engine/reference/commandline/inspect/\
\
Within using docker exec.. the container, you can run a lot of Linux commands\
\
docker pull lomuga/docker_repo_name:tag_name
\f1  \
Downloads a container onto your development environment. \
\
Ensure that the environment variables are read correctly while running the containers. Check using:\

\f0 # Run from the directory where you have the compose file present\
docker-compose config\
\pard\pardeftab720\partightenfactor0

\f1 \cf2 \
If you are rebuilding the images, you must delete the existing images locally, using:\
\pard\pardeftab720\partightenfactor0

\f0 \cf2 # Run from the directory where you have the compose file present\
docker-compose down\
# To delete all dangling images\
docker image prune --all\
\pard\tx2688\pardeftab720\partightenfactor0

\f1 \cf2 \
\pard\pardeftab720\partightenfactor0
\cf2 \
Pushing images\
\pard\pardeftab720\partightenfactor0

\f0 \cf2 # Create a container\
docker run --name image1 -it busybox echo Image1\
# Commit container to new image\
docker commit image1 amjibaly/stuff:image1\
# Push to dockerhub repo\
docker push amjibaly/stuff:image1\
\
# Create a second container\
docker run --name image2 -it busybox echo Image2\
# Commit container to new image\
docker commit image2 amjibaly/stuff:image2\
# Push to same dockerhub repo with different tag\
docker push amjibaly/stuff:image2\
\pard\pardeftab720\partightenfactor0

\f1 \cf2 \
\
NOW you can have yml scripts to (i) build the images and (iii) create the containers from the images\
\
(i)\
If you have a docker-compose-build.yml\
\pard\pardeftab720\partightenfactor0

\f0 \cf2 # Make sure the Docker services are running in your local machine\
# Remove unused and dangling images\
docker image prune --all\
# Run this command from the directory where you have the "docker-compose-build.yaml" file present\
docker-compose -f docker-compose-build.yaml build --parallel\
\pard\pardeftab720\partightenfactor0

\f1 \cf2 \
\
(ii)\
if you have a docker-compose.yml\
\pard\pardeftab720\partightenfactor0

\f0 \cf2 $ docker-compose up\
\
\
KUBERNETES\
\
# Set up a kubernetes cluster with one command\
\pard\pardeftab720\partightenfactor0
\cf2 \outl0\strokewidth0 \strokec2 # Feel free to use the same/different flags as you like\
eksctl create cluster --name myCluster --region=us-east-1 --version=1.18 --nodes-min=2 --nodes-max=3\
# Recommended: You can see many more flags using "eksctl create cluster --help" command.\
# For example, you can set the node instance type using --node-type flag\
\pard\pardeftab720\partightenfactor0
\cf2 \outl0\strokewidth0 \
# get the nodes from your cluster\
\pard\pardeftab720\partightenfactor0
\cf2 \outl0\strokewidth0 \strokec2 kubectl get nodes\
\pard\pardeftab720\partightenfactor0
\cf2 \outl0\strokewidth0 \
\
AWS\
\
# prints all the credentials stored locally\
\pard\pardeftab720\partightenfactor0
\cf2 \outl0\strokewidth0 \strokec2 cat ~/.aws/credentials\outl0\strokewidth0 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\
TERMINAL\
\
cp file_name directory_name # copies and pastes a file into another directory\
\
Vim file_name # you can alter the file in the terminal\
\
# encoding from binary to ASCII\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f3\fs36 \cf3 \kerning1\expnd0\expndtw0 \CocoaLigature0 echo -n "$POSTGRES_PASSWORD" | base64
\f0\fs24 \cf2 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\
}